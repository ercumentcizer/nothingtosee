-- Create Database
CREATE DATABASE SchoolManagement;
USE SchoolManagement;

-- Create Table: Teacher
CREATE TABLE Teacher (
    TeacherID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    PhoneNumber VARCHAR(15) NOT NULL,
    HireDate DATE NOT NULL,
    Department VARCHAR(50) NOT NULL
);

-- Create Table: Student
CREATE TABLE Student (
    StudentID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Address VARCHAR(255) NOT NULL,
    PhoneNumber VARCHAR(15) UNIQUE NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    EnrollmentDate DATE NOT NULL
);

-- Create Table: Course
CREATE TABLE Course (
    CourseID INT PRIMARY KEY AUTO_INCREMENT,
    CourseName VARCHAR(100) NOT NULL,
    CourseDescription TEXT,
    CourseCredits INT NOT NULL,
    Department VARCHAR(50) NOT NULL
);

-- Create Table: Schedule
CREATE TABLE Schedule (
    ScheduleID INT PRIMARY KEY AUTO_INCREMENT,
    DayOfWeek VARCHAR(20) NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL
);

-- Create Table: Exam
CREATE TABLE Exam (
    ExamID INT PRIMARY KEY AUTO_INCREMENT,
    ExamDate DATE NOT NULL,
    TotalMarks INT NOT NULL,
    ExamType VARCHAR(50) NOT NULL,
    RoomNumber VARCHAR(20) NOT NULL,
    Duration TIME NOT NULL,
    CourseID INT NOT NULL,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE
);

-- Create Table: Grade
CREATE TABLE Grade (
    GradeID INT PRIMARY KEY AUTO_INCREMENT,
    GradeValue CHAR(2) NOT NULL,
    Comments TEXT,
    GradeAssignedDate DATE NOT NULL
);

-- Create Table: Event
CREATE TABLE Event (
    EventID INT PRIMARY KEY AUTO_INCREMENT,
    EventName VARCHAR(100) NOT NULL,
    Location VARCHAR(100) NOT NULL,
    Description TEXT,
    Organizer VARCHAR(50) NOT NULL,
    EventDate DATE NOT NULL
);

-- Create Table: Attendance
CREATE TABLE Attendance (
    AttendanceID INT PRIMARY KEY AUTO_INCREMENT,
    AttendanceDate DATE NOT NULL,
    AttendanceStatus VARCHAR(20) NOT NULL,
    Remarks TEXT,
    StudentID INT NOT NULL,
    CourseID INT NULL,
    EventID INT NULL,
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE SET NULL,
    FOREIGN KEY (EventID) REFERENCES Event(EventID) ON DELETE SET NULL
);

-- Create Table: LibraryBook
CREATE TABLE LibraryBook (
    BookID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(200) NOT NULL,
    Author VARCHAR(100) NOT NULL,
    ISBN VARCHAR(20) UNIQUE NOT NULL,
    PublishedYear YEAR NOT NULL,
    Status VARCHAR(20) NOT NULL
);

-- Relationships
-- Teacher schedules courses
CREATE TABLE TeacherSchedule (
    TeacherID INT,
    ScheduleID INT,
    PRIMARY KEY (TeacherID, ScheduleID),
    FOREIGN KEY (TeacherID) REFERENCES Teacher(TeacherID) ON DELETE CASCADE,
    FOREIGN KEY (ScheduleID) REFERENCES Schedule(ScheduleID) ON DELETE CASCADE
);

-- Course has exams
CREATE TABLE CourseExam (
    CourseID INT,
    ExamID INT,
    PRIMARY KEY (CourseID, ExamID),
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE,
    FOREIGN KEY (ExamID) REFERENCES Exam(ExamID) ON DELETE CASCADE
);

-- Student takes courses
CREATE TABLE StudentCourse (
    StudentID INT,
    CourseID INT,
    PRIMARY KEY (StudentID, CourseID),
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE
);

-- Student receives grades
CREATE TABLE StudentGrade (
    StudentID INT,
    GradeID INT,
    PRIMARY KEY (StudentID, GradeID),
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (GradeID) REFERENCES Grade(GradeID) ON DELETE CASCADE
);

-- Teacher organizes events
CREATE TABLE TeacherEvent (
    TeacherID INT,
    EventID INT,
    PRIMARY KEY (TeacherID, EventID),
    FOREIGN KEY (TeacherID) REFERENCES Teacher(TeacherID) ON DELETE CASCADE,
    FOREIGN KEY (EventID) REFERENCES Event(EventID) ON DELETE CASCADE
);

-- Student attends events
CREATE TABLE StudentEvent (
    StudentID INT,
    EventID INT,
    PRIMARY KEY (StudentID, EventID),
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (EventID) REFERENCES Event(EventID) ON DELETE CASCADE
);

-- Exams are held in specific rooms
CREATE TABLE ExamRoom (
    ExamID INT,
    RoomNumber VARCHAR(20),
    PRIMARY KEY (ExamID, RoomNumber),
    FOREIGN KEY (ExamID) REFERENCES Exam(ExamID) ON DELETE CASCADE
);

-- Student borrows library books
CREATE TABLE BorrowBook (
    StudentID INT,
    BookID INT,
    PRIMARY KEY (StudentID, BookID),
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (BookID) REFERENCES LibraryBook(BookID) ON DELETE CASCADE
);

-- Teacher lectures courses
CREATE TABLE TeacherCourse (
    TeacherID INT,
    CourseID INT,
    PRIMARY KEY (TeacherID, CourseID),
    FOREIGN KEY (TeacherID) REFERENCES Teacher(TeacherID) ON DELETE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE
);

